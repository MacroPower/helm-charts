{{- include "ocis.basicServiceTemplates" (dict "scope" . "appName" "appNameSearch" "appNameSuffix" "") -}}
apiVersion: apps/v1
kind: Deployment
{{ include "ocis.metadata" . }}
spec:
  {{- include "ocis.selector" . | nindent 2 }}
  replicas: 1 #TODO: https://github.com/owncloud/ocis-charts/issues/15
  strategy:
    type: Recreate
  template:
    {{- include "ocis.templateMetadata" (dict "scope" $ "configCheck" false) | nindent 4 }}
    spec:
      {{- include "ocis.affinity" .Values.services.search | nindent 6 }}
      {{- include "ocis.securityContextAndtopologySpreadConstraints" . | nindent 6 }}
      {{- if and $.Values.services.search.persistence.enabled $.Values.services.search.persistence.chownInitContainer }}
      initContainers:
        - name: init-chown-data
          {{- include "ocis.initContainerImage" $ | nindent 10 }}
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          {{- include "ocis.initChownDataCommand" $ | nindent 10 }}
          volumeMounts:
          - name: {{ include "ocis.persistence.dataVolumeName" . }}
            mountPath: /var/lib/ocis
      {{ end }}
      {{- include "ocis.priorityClassName" $.priorityClassName | nindent 6 }}
      {{- include "ocis.hostAliases" $ | nindent 6 }}
      nodeSelector: {{ toYaml $.nodeSelector | nindent 8 }}
      containers:
        - name: {{ .appName }}
          {{- include "ocis.image" $ | nindent 10 }}
          command: ["ocis"]
          args: ["search", "server"]
          {{- include "ocis.containerSecurityContext" . | nindent 10 }}
          env:
            {{- include "ocis.serviceRegistry" . | nindent 12 }}
            {{- include "ocis.events" . | nindent 12 }}

            - name: SEARCH_LOG_COLOR
              value: {{ .Values.logging.color | quote }}
            - name: SEARCH_LOG_LEVEL
              value: {{ .Values.logging.level | quote }}
            - name: SEARCH_LOG_PRETTY
              value: {{ .Values.logging.pretty | quote }}

            - name: SEARCH_TRACING_ENABLED
              value: "{{ .Values.tracing.enabled }}"
            - name: SEARCH_TRACING_TYPE
              value: {{ .Values.tracing.type | quote }}
            - name: SEARCH_TRACING_ENDPOINT
              value: {{ .Values.tracing.endpoint | quote }}
            - name: SEARCH_TRACING_COLLECTOR
              value: {{ .Values.tracing.collector | quote }}

            - name: SEARCH_DEBUG_PPROF
              value: {{ .Values.debug.profiling | quote }}

            - name: SEARCH_GRPC_ADDR
              value: 0.0.0.0:9220
            - name: SEARCH_DEBUG_ADDR
              value: 0.0.0.0:9224

            {{- with .Values.services.search.extractor.sizeLimit }}
            - name: SEARCH_CONTENT_EXTRACTION_SIZE_LIMIT
              value: {{ int64 . | quote}}
            {{- end }}

            {{- if  eq .Values.services.search.extractor.type "tika" }}
            - name: SEARCH_EXTRACTOR_TYPE
              value: tika

            - name: SEARCH_EXTRACTOR_TIKA_TIKA_URL
              value: {{ required "services.search.extractor.tika.url needs to be set when services.search.extractor.type is set to tika" .Values.services.search.extractor.tika.url | quote }}

            - name: SEARCH_EXTRACTOR_TIKA_CLEAN_STOP_WORDS
              value: {{ .Values.services.search.extractor.tika.cleanStopWords | quote }}
            {{- else }}
            - name: SEARCH_EXTRACTOR_TYPE
              value: basic
            {{- end }}

            - name: SEARCH_EXTRACTOR_CS3SOURCE_INSECURE
              value: {{ .Values.insecure.ocisHttpApiInsecure | quote }}

            - name: SEARCH_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "secrets.jwtSecret" . }}
                  key: jwt-secret

            - name: SEARCH_SERVICE_ACCOUNT_ID
              valueFrom:
                configMapKeyRef:
                  name: {{ include "config.authService" . }}
                  key: service-account-id
            - name: SEARCH_SERVICE_ACCOUNT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "secrets.serviceAccountSecret" . }}
                  key: service-account-secret

            - name: OCIS_ASYNC_UPLOADS
              value: "true"

          {{- include "ocis.livenessProbe" . | nindent 10 }}

          resources: {{ toYaml .resources | nindent 12 }}

          ports:
            - name: grpc
              containerPort: 9220
            - name: metrics-debug
              containerPort: 9224

          volumeMounts:
            - name: ocis-config-tmp
              mountPath: /etc/ocis # we mount that volume only to apply fsGroup to that path
            - name: messaging-system-ca
              mountPath: /etc/ocis/messaging-system-ca
              readOnly: true
            - name: {{ include "ocis.persistence.dataVolumeName" . }}
              mountPath: /var/lib/ocis

      {{- include "ocis.imagePullSecrets" $ | nindent 6 }}
      volumes:
        - name: ocis-config-tmp
          emptyDir: {}
        - name: messaging-system-ca
          {{ if and (.Values.messagingSystem.external.enabled) (not .Values.messagingSystem.external.tls.certTrusted) }}
          secret:
            secretName: {{ include "secrets.messagingSystemCASecret" . }}
          {{ else }}
          emptyDir: {}
          {{ end }}
        {{- include "ocis.persistence.dataVolume" . | nindent 8 }}
